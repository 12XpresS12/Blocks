plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
}

// maven publish settings
//group = "org.randomstack"
//version = "0.1.0"
// The artifact ID defaults to the project name configured in settings.gradle, which in turn defaults to the project directory's name.

sourceCompatibility = 1.8

ext {
    jmeVersion = "[3.2,)"
    lombokVersion = "[1.18,)"
    slf4jVersion = "[1.8,)"
    simMathVersion = "[1.4,)"
//    jme3UtilsVersion = "[0.1,)"
    junitVersion = "[5.4.0,)"
    mockitoVersion = "[3.1,)"
    caffeineVersion = "[2.8,)"
    log4j2Version = "[2.11,)"
    jacksonVersion = "[2.9,)"
    protobufVersion = "[3.10,)"
}

repositories {
    jcenter()
//    mavenLocal()
//    maven {
//        url  "https://dl.bintray.com/randomstack/RandomStack"
//    }
}

dependencies {
    // assets
    api project(':assets')

    // JME
    implementation "org.jmonkeyengine:jme3-core:${jmeVersion}"
    compileOnly "org.jmonkeyengine:jme3-bullet:${jmeVersion}"

    // utilities
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "com.simsilica:sim-math:${simMathVersion}"
    implementation "com.github.ben-manes.caffeine:caffeine:${caffeineVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

    // logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.slf4j:jul-to-slf4j:${slf4jVersion}"

    implementation "org.apache.logging.log4j:log4j-api:${log4j2Version}"
    implementation "org.apache.logging.log4j:log4j-core:${log4j2Version}"
    implementation "org.apache.logging.log4j:log4j-slf4j18-impl:${log4j2Version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    // testing
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.jmonkeyengine:jme3-core:${jmeVersion}"
    testImplementation "org.jmonkeyengine:jme3-desktop:${jmeVersion}"
    testImplementation "org.jmonkeyengine:jme3-lwjgl:${jmeVersion}"
    testImplementation "org.jmonkeyengine:jme3-bullet:${jmeVersion}"
    testImplementation "org.jmonkeyengine:jme3-bullet-native:${jmeVersion}"
    testImplementation "org.jmonkeyengine:jme3-blender:${jmeVersion}"
}

test {
    useJUnitPlatform()
}

// copy the generated javadocs into the /docs folder for the github pages
task copyJavadoc(dependsOn: javadoc) {
    doLast {
        copy {
            from "$buildDir/docs"
            into "$projectDir/docs"
        }
    }
}

// remove the generated javadocs in the /docs folder
task cleanJavadoc(type: Delete) {
    delete "$projectDir/docs"
}

clean {
    dependsOn cleanJavadoc
}

build {
    dependsOn copyJavadoc
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

javadoc {
    failOnError = false
}